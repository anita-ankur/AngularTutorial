/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'anita.srivastava' at '4/6/20 5:10 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
//apply plugin: 'java'
/*buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "com.bmuschko:gradle-tomcat-plugin:2.5"
	}
}*/
plugins {
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'war'
	id "com.moowork.node" version "1.3.1"
//	id 'application'
//	id "com.bmuschko.tomcat-base" version "2.5"
	}
	group = 'com.cardinalhealth.angulartutorial'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '1.8'
	war.baseName('AngularTutorial')
	war.version('1.0')
	war.manifest {
		attributes('Main-Class': 'com.cardinalhealth.angulartutorial.TutorialApplication')
	}
	
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
//    jcenter()
	mavenCentral()
}

//Backend tasks
task bootStandaloneBackend {
	group 'application'
	dependsOn bootRun
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    //testCompile 'junit:junit:4.12'
    implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	//Angular
	def webappDir = "$projectDir/src/main/webapp"
	sourceSets {
		main {
			resources {
				srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
			}
		}
	}

	processResources {
		dependsOn "buildAngular"
	}

	task buildAngular(type:Exec) {
		// installAngular should be run prior to this task
		dependsOn "installAngular"
		workingDir "$webappDir"
		inputs.dir "$webappDir"
		// Add task to the standard build group
		group = BasePlugin.BUILD_GROUP
		// ng doesn't exist as a file in windows -> ng.cmd
		if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
			commandLine "ng.cmd", "build"
		} else {
			commandLine "ng", "build"
		}
	}

	task installAngular(type:Exec) {
		workingDir "$webappDir"
		inputs.dir "$webappDir"
		group = BasePlugin.BUILD_GROUP
		if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
			commandLine "npm.cmd", "install"
		} else {
			commandLine "npm", "install"
		}
	}




	task bootFullApplication(type: GradleBuild){
		group('application')
		setTasks(['bootStandaloneBackend'])
	}
}
